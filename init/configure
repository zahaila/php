#!/bin/bash

set -e

echo "Start PHP"

if [ -f /run/init/is-configured ];then
    /usr/bin/supervisord -c /etc/supervisor/supervisord.conf
    exit 0
fi

full_version=$(php-config --version | egrep '[0-9]\.[0-9]\.[0-9]{1,2}' | cut -d'-' -f1)
major=$(echo ${full_version} | cut -d. -f1)
minor=$(echo ${full_version} | cut -d. -f2)
patch=$(echo ${full_version} | cut -d. -f3)
php_version="${major}.${minor}"

sysconfdir=/etc/php/${php_version}
extension_dir=$(php-config --extension-dir)

cli_confdir=${sysconfdir}
cli_ini=php-cli.ini

sapi_confdir=${sysconfdir}
pool_conf=${sapi_confdir}/fpm/pool.d/www.conf

APP_ENV=${APP_ENV:-"debug"}
if [ "${APP_ENV}" != "prod" ] && [ "${APP_ENV}" != "debug" ] && [ "${APP_ENV}" != "dev" ];then
    APP_ENV="debug"
fi

if [ ! -d ${sapi_confdir} ] || [ ! -d ${cli_confdir} ];then
    echo "Diretórios de configurações PHP inexistentes! \n"
    exit 1 
fi
if [ ! -f ${sapi_confdir}/fpm/php.ini ] || [ ! -f ${cli_confdir}/${cli_ini} ];then
    echo "Arquivos de configurações PHP inexistentes! \n"
    exit 1 
fi

# Atualiza configuração. Descomenta se estiver comentada
update_config() {
    file="${1}"
    conf_list="${2}"
    if [ -f "${file}" ] && [ -n "${conf_list}" ]; then
        confs=($(echo ${conf_list}))
        for conf in "${confs[@]}"; do
            param=$(echo ${conf} | sed -E -n -e 's/^([0-9\.a-z\_]+)\=.*/\1/p')
            valor=$(echo ${conf} | sed -E -n -e 's/^[0-9a-z\.\_]+\=(.+)$/\1/p')
            sed -i -E -e "s#^\;?\s*${param}\s*\=\s*([^\n]+|$)#${param} = ${valor}#" ${file}
        done
    fi
}

remove_xdebug_ini() {
    if [ -f ${cli_confdir}/conf.d/20-xdebug.ini ]; then
        rm -f ${cli_confdir}/conf.d/20-xdebug.ini
    fi
    if [ -f ${sapi_confdir}/conf.d/20-xdebug.ini ]; then
        rm -f ${sapi_confdir}/conf.d/20-xdebug.ini
    fi
}

remove_opcache_ini() {
    if [ -f ${cli_confdir}/conf.d/10-opcache.ini ]; then
        rm -f ${cli_confdir}/conf.d/10-opcache.ini
    fi
    if [ -f ${sapi_confdir}/conf.d/10-opcache.ini ]; then
        rm -f ${sapi_confdir}/conf.d/10-opcache.ini
    fi
}

size_unit="k"
time_unit="s"

file_descriptors=$(ulimit -n) # worker_connections
# https://stackoverflow.com/questions/47545960/how-to-check-the-number-of-cores-used-by-docker-container
qtd_cpus=$(( $(cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us) / 100000 )) # divide a qtd entre PHP e Nginx
if [ ${qtd_cpus} -lt 1 ];then
    qtd_cpus=1
fi
mempage=$(getconf PAGESIZE)
mempage_size=$((${mempage} / 1024)) # B => k
ram_total=$(( ($(cat /sys/fs/cgroup/memory/memory.limit_in_bytes) / 1024) / 1024 ))

# PHP.ini
max_execution_time=$((60*8)) # Facilitar debug
output_buffering=${mempage} # mempage_size in Bytes
max_input_vars=4000
memory_limit=${ram_total} # Megabytes

DEFAULT_PHP_INI=''
if [[ "${APP_ENV}" =~ ^prod* ]] || [ "${APP_ENV}" = "test" ]; then
    max_execution_time=10 # impede scripts bosta
    memory_limit=$((${memory_limit} * 10 / 100)) # 10%. Impede scripts bosta

    DEFAULT_PHP_INI="cgi.fix_pathinfo=0 display_startup_errors=Off memory_limit=${memory_limit}M zend.assertions=-1 report_memleaks=Off display_errors=Off log_errors=Off expose_php=Off max_execution_time=${max_execution_time} date.time_zone=America/Manaus session.cookie_secure=On"
fi

# Maximum time in seconds a script is allowed to parse input data, like POST and GET.
# Timing begins at the moment PHP is invoked at the server and ends when execution begins.
max_input_time=$((${max_execution_time} * 10 / 100)) # 10%

if [ "${APP_ENV}" = "dev" ]; then
    DEFAULT_PHP_INI="cgi.fix_pathinfo=0 display_startup_errors=On implicit_flush=On memory_limit=${memory_limit}M display_errors=On log_errors=On expose_php=On max_execution_time=${max_execution_time} date.time_zone=America/Manaus session.cookie_secure=Off"
fi

if [ -n "${PHP_INI_CONF}" ];then
    # Concatena
    PHP_INI_CONF="${DEFAULT_PHP_INI} ${PHP_INI_CONF}"
else
    PHP_INI_CONF=${PHP_INI_CONF:-${DEFAULT_PHP_INI}}
fi

if [ -n "${PHP_INI_CONF}" ];then
    update_config "${sapi_confdir}/fpm/php.ini" "${PHP_INI_CONF}"
    update_config ${cli_confdir}/${cli_ini} "${PHP_INI_CONF}"
fi

# control opcache lib load
if [[ ( -f ${extension_dir}/opcache.so ) && ( "${APP_ENV}" = "debug"  || "${APP_ENV}" = "prod" ) ]]; then
    qtd_php_files=65406
    if [ -d /var/www/html ];then
        qtd_php_files=$(find /var/www/html -name "*.php" | wc -l)
    fi
    max_accelerated_files=$(( ${qtd_php_files} / 100 + ${qtd_php_files} ))
    DEFAULT="enable=1 enable_cli=0 memory_consumption=256 interned_strings_buffer=16 validate_timestamps=0 revalidate_freq=0 enable_file_override=1 save_comments=0 error_log='/var/log/php-opcache-error.log' max_accelerated_files=${max_accelerated_files} fast_shutdown=1"
    OPCACHE_CONF=${OPCACHE_CONF:-${DEFAULT}}
    if [ "${OPCACHE_CONF}" = "off" ]; then
        remove_opcache_ini
    else
        if [ ! -f "${sapi_confdir}/conf.d/10-opcache.ini" ];then
            echo "[opcache]" > ${sapi_confdir}/conf.d/10-opcache.ini
            echo "zend_extension=${extension_dir}/opcache.so" >> ${sapi_confdir}/conf.d/10-opcache.ini
        fi
        opcache_confs=($(echo ${OPCACHE_CONF}))
        for conf in "${opcache_confs[@]}"; do
            echo "opcache.${conf}" >> ${sapi_confdir}/conf.d/10-opcache.ini
        done
    fi
fi

if [[ ( -f ${extension_dir}/xdebug.so ) && ( "${APP_ENV}" = "debug"  || "${APP_ENV}" = "dev" ) ]]; then
    hospedeiro=$(/sbin/ip route|awk '/default/ { print $3 }')
    DEFAULT="mode=coverage,develop,debug start_with_request=yes client_port=9000 idekey=VSCODE client_host=${hospedeiro}"
    XDEBUG_CONFIG=${XDEBUG_CONFIG:-${DEFAULT}}
    if [ "${XDEBUG_CONFIG}" = "off" ]; then
        remove_xdebug_ini
    else
        if [ ! -f "${sapi_confdir}/conf.d/20-xdebug.ini" ]; then
            echo "[Xdebug]" > "${sapi_confdir}/conf.d/20-xdebug.ini"
            echo "zend_extension=${extension_dir}/xdebug.so" >> ${sapi_confdir}/conf.d/20-xdebug.ini
        fi
        confs=($(echo ${XDEBUG_CONFIG}))
        for conf in "${confs[@]}"; do
            echo "xdebug.${conf}" >> ${sapi_confdir}/conf.d/20-xdebug.ini
        done
    fi
fi

# control parallel lib load
if [ -f ${extension_dir}/parallel.so ]; then
    ENABLE_PARALLEL=${ENABLE_PARALLEL:-"on"}
    if [ ${ENABLE_PARALLEL} = "on" ]; then
        echo "[parallel]" > ${sapi_confdir}/conf.d/20-parallel.ini
        echo "extension=${extension_dir}/parallel.so" > ${sapi_confdir}/conf.d/20-parallel.ini
    fi
fi

if [ -f ${extension_dir}/redis.so ]; then
    REDIS_CONF=${REDIS_CONF:-"off"}
    if [ "${REDIS_CONF}" = "off" ]; then
        if [ -f "${sapi_confdir}/conf.d/20-redis.ini" ]; then
            rm -f ${sapi_confdir}/conf.d/20-redis.ini
        fi
    else
        REDIS_CONF="session.probability=0 ${REDIS_CONF}"
        if [ ! -f "${sapi_confdir}/conf.d/20-redis.ini" ]; then
            echo "[redis]" > ${sapi_confdir}/conf.d/20-redis.ini
            echo "extension=${extension_dir}/redis.so" > ${sapi_confdir}/conf.d/20-redis.ini
        fi
        update_config "${sapi_confdir}/fpm/php.ini" "${REDIS_CONF}"
    fi
fi

if [ -f ${extension_dir}/memcached.so ]; then 
    ENABLE_MEMCACHED=${ENABLE_MEMCACHED:-"off"}
    if [ ${ENABLE_MEMCACHED} = "on" ]; then
        echo "[memcached]" > ${sapi_confdir}/conf.d/20-memcached.ini
        echo "extension=${extension_dir}/memcached.so" > ${sapi_confdir}/conf.d/20-memcached.ini
    fi
fi

if [ -f ${extension_dir}/mongodb.so ]; then
    ENABLE_MONGODB=${ENABLE_MONGODB:-"off"}
    if [ ${ENABLE_MONGODB} = "on" ]; then
        echo "[mongodb]" > ${sapi_confdir}/conf.d/20-mongodb.ini
        echo "extension=${extension_dir}/mongodb.so" > ${sapi_confdir}/conf.d/20-mongodb.ini
    fi
fi

if [ ! -f /etc/supervisor/conf.d/supervisord.conf ];then
    echo -e "[supervisord]
nodaemon=true
logfile=/dev/null
logfile_maxbytes=0
pidfile=/run/supervisord.pid" > /etc/supervisor/conf.d/supervisord.conf
fi

WEB_SERVER=${WEB_SERVER:-"off"}
ENABLE_PHP_FPM=${ENABLE_PHP_FPM:-"off"}
if [ "${WEB_SERVER}" = "on" ] && [ "${ENABLE_PHP_FPM}" = "off" ];then
    ENABLE_PHP_FPM="on"
fi

if [ -d /etc/nginx ] && [ "${WEB_SERVER}" = "on" ]; then
    echo -e "Adicionando entrada do nginx no supervisor...\n"
    echo -e "\n[program:nginx]" > /etc/supervisor/conf.d/20nginx.conf
    echo -e "command=/usr/sbin/nginx -g \"daemon off;\"" >> /etc/supervisor/conf.d/20nginx.conf

    confs=("stdout_logfile=/dev/stdout" "stdout_logfile_maxbytes=0" "stderr_logfile=/dev/stderr" "stderr_logfile_maxbytes=0" "autorestart=true")
    for conf in "${confs[@]}"; do
        echo -e "${conf}" >> /etc/supervisor/conf.d/20nginx.conf
    done
else
    echo -e "Entrada de inicialização do nginx não adicionada ao supervisor!\n"
fi

if [ "${ENABLE_PHP_FPM}" = "on" ];then
    # configure supervisor
    echo -e "[program:php-fpm]\ncommand=/usr/sbin/php-fpm --fpm-config /etc/php/${php_version}/fpm/php-fpm.conf -F\nstdout_logfile=/dev/stdout\nstdout_logfile_maxbytes=0\nstderr_logfile=/dev/stderr\nstderr_logfile_maxbytes=0\nautorestart=true\nstartretries=3" > /etc/supervisor/conf.d/10php-fpm.conf

    # Cria diretório runtime PHP
    if [ ! -d /run/php ]; then
        mkdir -p /run/php
    fi

    # Generaliza nome php-fpm
    if [ ! -f /usr/sbin/php-fpm ];then
        ln -s /usr/sbin/php-fpm7.* /usr/sbin/php-fpm
    fi

    ENABLE_FPM_SOCKET=${ENABLE_FPM_SOCKET:-"on"}
    if [ ${ENABLE_FPM_SOCKET} = "on" ];then
        echo "Enable PHP-FPM socket"
        sed -i -E -e "s|listen = 127\.0\.0\.1\:9000|listen = /run/php/php${major}-fpm.sock|g" ${pool_conf}
    else
        echo "Disable PHP-FPM socket"
        sed -i -E -e "s|listen = /run/php/php${major}-fpm.sock|listen = 127\.0\.0\.1\:9000|g" ${pool_conf}
    fi

    # Libera captura de variáveis de ambiente
    sed -E -i -e 's/^\;clear_env/clear_env/' ${pool_conf}

    if [ "${APP_ENV}" = "prod" ] || [ "${APP_ENV}" = "test" ];then
        fpm_proc_mem=$(( (40240 + ${mempage_size}) / 1024 )) # qtd média memória alocada por um processo PHP + buffer em Mb
        nginx_proc_mem=$(( (11616 * ${qtd_cpus}) / 1024 )) # qtd média mem alocada pelos processos nginx  em Mb

        # supervisord + bash + start-container
        so_mem=$(( (19796 + 3708 + 3568) / 1024 ))
        opcache_mem=0
        if [ -f ${sapi_confdir}/conf.d/10-opcache.ini ];then
            opcache_mem=$(grep 'memory_consumption' ${sapi_confdir}/conf.d/10-opcache.ini | cut -d'=' -f2) 
        fi

        echo -e "\nMemória total disponível         : ${ram_total}Mb"
        echo "Tamanho memória base processos Nginx  : ${nginx_proc_mem}Mb"
        echo "Tamanho memória base PHP-FPM          : ${fpm_proc_mem}Mb"
        echo "Tamanho memória base SO               : ${so_mem}Mb"

        max_children=$(( (${ram_total} - ${so_mem} - ${nginx_proc_mem}) / ${fpm_proc_mem} ))
        if [ ${max_children} -lt 1 ];then
            max_children=1
        fi
        start_servers=$(( ${qtd_cpus} * 4 ))
        min_spare_servers=$(( ${qtd_cpus} * 2 ))
        max_spare_servers=${start_servers}

        sed -E -i -e "/pm.start_servers/d;/pm.min_spare_servers/d;/pm.max_spare_servers/d;/pm.max_requests/d;/pm.process_idle_timeout/d;/pm.max_children/d;" ${pool_conf}

        PHP_FPM_TYPE=${PHP_FPM_TYPE:-"static"}
        if [ "${PHP_FPM_TYPE}" = "dynamic" ]; then
            sed -E -i -e "s/pm = .+/pm = dynamic/" ${pool_conf}
            sed -E -i -e '/pm \= dynamic/a\' -e "pm\.process_idle_timeout\= ${max_execution_time}" ${pool_conf}
            sed -E -i -e '/pm \= dynamic/a\' -e "pm\.max_spare_servers \= ${max_spare_servers}" ${pool_conf}
            sed -E -i -e '/pm \= dynamic/a\' -e "pm\.min_spare_servers \= ${min_spare_servers}" ${pool_conf}
            sed -E -i -e '/pm \= dynamic/a\' -e "pm\.max_children \= ${max_children}" ${pool_conf}
            sed -E -i -e '/pm \= dynamic/a\' -e "pm\.max_requests \= 1024" ${pool_conf}
            sed -E -i -e '/pm \= dynamic/a\' -e "pm\.start_servers \= ${start_servers}" ${pool_conf}
            # Envia erros para STDERR
            sed -E -i -e '/pm \= dynamic/a\' -e "catch_workers_output = yes" ${pool_conf}
        fi
        if [ "${PHP_FPM_TYPE}" = "static" ]; then
            sed -E -i -e "s/pm = .+/pm = static/" ${pool_conf}
            sed -E -i -e '/pm \= static/a\' -e "pm\.max_children \= ${max_children}" ${pool_conf}
            sed -E -i -e '/pm \= static/a\' -e 'pm.max_requests = 1024' ${pool_conf}
            # Envia erros para STDERR
            sed -E -i -e '/pm \= static/a\' -e "catch_workers_output = yes" ${pool_conf}
        fi

        # Envia erros para STDERR
        sed -E -i -e 's/\;?error_log[[:space:]]*\=[[:space:]]*.+/error_log = \/dev\/stderr/' "${sapi_confdir}/php-fpm.conf"

        # Remove comentários
        sed -i -E -e '/(^;|^$)/d' ${pool_conf}
    fi
    #fpm_proc_mem=$(ps -ylC php-fpm --no-headers --sort:rss | awk '{print $8}')
    #echo -e "Memória por processo: ${fpm_proc_mem}\n"
fi

if [ "${WEB_SERVER}" = "on" ] && [ -f /run/init/webserver ]; then
    echo "Call webserver"
    /run/init/webserver ${APP_ENV} ${max_execution_time} ${max_input_time} ${output_buffering} ${mempage} ${mempage_size} ${qtd_cpus} ${file_descriptors} ${major} ${SERVER_NAME}
fi

# Força finalização processamento, caso max_execution_time falhe
sed -E -i -e '/^listen.group \=/a\' -e "request_terminate_timeout = $((${max_execution_time} * 10 / 100 + ${max_execution_time}))" ${pool_conf}

RAW_POOL=${RAW_POOL:-''}
if [ -n "${RAW_POOL}" ]; then
    update_config "${pool_conf}" "${RAW_POOL}"
fi

if [ "${APP_ENV}" = "prod" ];then
    # Remove comentários
    sed -i -E '/(^;|^$)/d' ${sapi_confdir}/fpm/php.ini
    sed -i -E '/(^;|^$)/d' ${cli_confdir}/${cli_ini}
    sed -i -E '/(^;|^$)/d' ${pool_conf}
fi

# Configure supervisor
sed -E -i -e '/pidfile/a user=root \;' /etc/supervisor/supervisord.conf

if [ ! -d /var/log/supervisor ];then
    mkdir -p /var/log/supervisor
fi

if [ ! -f /var/log/php.log ];then
    echo "" > /var/log/php.log
    chown www-data:www-data /var/log/php.log
fi

# block next configuration process
touch /run/init/is-configured 
