#!/bin/bash

APP_ENV=${1}
max_execution_time=${2}
max_input_time=${3}
output_buffering=${4}
mempage=${5} #$(getconf PAGESIZE)}
mempage_size=${6}
qtd_cpus=${7} # $(sed -n '/processor/p' /proc/cpuinfo | wc -l)) # worker_processes
file_descriptors=${8}
major=${9} # Major php version
SERVER_NAME=${10:-"localhost"}
default_public_dir=${11:-"/var/www/html"}

#ContentSecurityPolicyHeader="default-src 'none'; img-src 'self; script-src 'self'; style-src 'self'; 'font-src 'self'; \
#                        base-uri 'self'; form-action 'self'; connect-src 'self'; frame-ancestors 'none"

## Place this file in "/etc/sysctl.d/network-tuning.conf" and
## run "sysctl -p" to have the kernel pick the new settings up

tunning_conf="/etc/sysctl.d/network-tuning.conf"
if [ ! -f ${tunning_conf} ];then
    touch ${tunning_conf}
fi

# Avoid a smurf attack
echo "net.ipv4.icmp_echo_ignore_broadcasts = 1" >> ${tunning_conf}
 
# Turn on protection for bad icmp error messages
echo "net.ipv4.icmp_ignore_bogus_error_responses = 1" >> ${tunning_conf}
 
# Turn on syncookies for SYN flood attack protection
echo "net.ipv4.tcp_syncookies = 1" >> ${tunning_conf}
 
# Turn on and log spoofed, source routed, and redirect packets
echo -e "net.ipv4.conf.all.log_martians = 1\nnet.ipv4.conf.default.log_martians = 1" >> ${tunning_conf}
 
# No source routed packets here
echo -e "net.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0" >> ${tunning_conf}
 
# Turn on reverse path filtering
echo -e "net.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.default.rp_filter = 1" >> ${tunning_conf}
 
# Make sure no one can alter the routing tables
echo "net.ipv4.conf.all.accept_redirects=0" >> ${tunning_conf}
echo "net.ipv4.conf.default.accept_redirects=0" >> ${tunning_conf}
echo "net.ipv4.conf.all.secure_redirects=0" >> ${tunning_conf}
echo "net.ipv4.conf.default.secure_redirects=0" >> ${tunning_conf}
 
# Don't act as a router
echo "net.ipv4.ip_forward=0" >> ${tunning_conf}
echo "net.ipv4.conf.all.send_redirects=0" >> ${tunning_conf}
echo "net.ipv4.conf.default.send_redirects=0" >> ${tunning_conf}
 
# Turn on execshild
echo "kernel.exec-shield = 1" >> ${tunning_conf}
echo "kernel.randomize_va_space=1" >> ${tunning_conf}
 
# Tune IPv6
#echo "net.ipv6.conf.default.router_solicitations = 0" >> ${tunning_conf}
#echo "net.ipv6.conf.default.accept_ra_rtr_pref = 0" >> ${tunning_conf}
#echo "net.ipv6.conf.default.accept_ra_pinfo = 0" >> ${tunning_conf}
#echo "net.ipv6.conf.default.accept_ra_defrtr = 0" >> ${tunning_conf}
#echo "net.ipv6.conf.default.autoconf = 0" >> ${tunning_conf}
#echo "net.ipv6.conf.default.dad_transmits = 0" >> ${tunning_conf}
#echo "net.ipv6.conf.default.max_addresses = 1" >> ${tunning_conf}
 
# Optimization for port usefor LBs
# Increase system file descriptor limit
if [ $(cat /proc/sys/fs/file-max) -lt 65535 ]; then
    echo "fs.file-max=65535" >> ${tunning_conf}
fi
 
# Allow for more PIDs (to reduce rollover problems); may break some programs 32768
if [ $(cat /proc/sys/kernel/pid_max) -lt 65535 ]; then
    echo "kernel.pid_max=65535" >> ${tunning_conf}
fi
 
# Increase system IP port limits
port_range=($(cat /proc/sys/net/ipv4/ip_local_port_range))
if [ $((${port_range[1]} - ${port_range[0]})) -lt $((65000 - 1024)) ]; then
    echo "net.ipv4.ip_local_port_range=1024 65000" >> ${tunning_conf}
fi
 
# Increase TCP max buffer size setable using setsockopt()
#echo "net.ipv4.tcp_rmem = 4096 87380 16777216" >> ${tunning_conf}
#echo "net.ipv4.tcp_wmem = 4096 87380 16777216" >> ${tunning_conf}
 
# Increase Linux auto tuning TCP buffer limits
# min, default, and max number of bytes to use
# set max to at least 4MB, or higher if you use very high BDP paths
# Tcp Windows etc
echo "net.core.rmem_max=16777216" >> ${tunning_conf}
echo "net.core.wmem_max=16777216" >> ${tunning_conf}

# When a system is under heavy load and an interface receives a lot of packets,
# then the Kernel might not process them fast enough.
# You can increase the number of packets hold in the queue (backlog) by changing:
echo "net.core.netdev_max_backlog=5000" >> ${tunning_conf}
echo "net.ipv4.tcp_window_scaling=1" >> ${tunning_conf}


# When the server has to cycle through a high volume of TCP connections,
# it can build up a large number of connections in TIME_WAIT state.
# TIME_WAIT means a connection is closed but the allocated
# resources are yet to be released. Setting this directive to 1
# will tell the kernel to try to recycle the allocation
# for a new connection when safe to do so.
# This is cheaper than setting up a new connection from scratch.
#echo "net.ipv4.tcp_tw_reuse = 1" >> ${tunning_conf}

# The minimum number of seconds that must elapse before
# a connection in TIME_WAIT state can be recycled.
# Lowering this value will mean allocations will be recycled faster.
#echo "net.ipv4.tcp_fin_timeout = 15" >> ${tunning_conf}

# Other tunings
if [ $(cat /proc/sys/net/core/somaxconn) -lt 512 ]; then
    if [ -f /etc/nginx/sites-enabled/default ]; then
        echo "net.core.somaxconn=4096" >> ${tunning_conf}
    fi
fi

echo "net.ipv4.tcp_max_syn_backlog=20480" >> ${tunning_conf}
echo "net.ipv4.tcp_max_tw_buckets=400000" >> ${tunning_conf}
#echo "net.ipv4.tcp_no_metrics_save = 1" >> ${tunning_conf}
#echo "net.ipv4.tcp_syn_retries = 3" >> ${tunning_conf}
echo "net.ipv4.tcp_synack_retries=2" >> ${tunning_conf}
#echo "vm.min_free_kbytes = 65536" >> ${tunning_conf}

if [ -f /sbin/sysctl ]; then
    /sbin/syscl -p ${tunning_conf}
fi

if [ -d /etc/nginx ]; then
    echo "Call nginx"
    /run/init/nginx ${APP_ENV} ${max_execution_time} ${max_input_time} ${output_buffering} ${mempage} ${mempage_size} ${qtd_cpus} ${file_descriptors} ${major} ${SERVER_NAME} ${default_public_dir}

    echo -e "\n[program:nginx]" >> /etc/supervisor/conf.d/supervisord.conf
    echo -e "command=/usr/sbin/nginx -g \"daemon off;\"" >> /etc/supervisor/conf.d/supervisord.conf
    confs=("stdout_logfile=/dev/stdout" "stdout_logfile_maxbytes=0" "stderr_logfile=/dev/stderr" "stderr_logfile_maxbytes=0" "autorestart=true")
    for conf in "${confs[@]}"; do
        echo -e "${conf}" >> /etc/supervisor/conf.d/supervisord.conf
    done
fi
#if [ -d /etc/apache2 ]; then
#    echo "Call apache"
#    . /run/init/apache2 ${ENABLE_FPM_SOCKET} ${max_execution_time} ${output_buffering} ${mempage} ${mempage_size} ${qtd_cpus} ${SERVER_NAME}
#fi